<?php

namespace dclaysmith\Generator\Template;

use dclaysmith\Generator\Template;
use dclaysmith\Generator\Formatter;
use dclaysmith\Generator\Database\Table;

class DataObjectTemplate extends TableTemplate 
{

	public function formatFilename() 
	{
		return $this->getFormatter($this->getTable()->getName())	// tbl_p_user_table-product
						->toTitle() 								// Tbl_P_User_Table-Product
						->replace("Tbl_P_","doP") 					// boPUser_Table-Product
						->replace("Tbl_C_","doC")					// (apply to child tables as well)
						->strip("_") 								// doPUserTable-Product
						->replace("-","_") 							// doPUserTable_Product
						->toString();								// return string
	}

	private function toProperName($base) 
	{
		return $this->getFormatter($base)							// tbl_p_user_table-product
						->toTitle()									// Tbl_P_User_Table-Product
						->strip("_Id") 								// (We don't need ID)
						->strip("Tbl_P_") 							// User_Table-Product
						->strip("Tbl_C_")							// (apply to child tables as well)
						->strip("_") 								// UserTable-Product
						->replace("-","_") 							// UserTable_Product
						->toString();				
	}

	private function toPluralProperName($base) 
	{
		return $this->getFormatter($this->toProperName($base))->pluralize()->toString();
	}

	private function toEngineClassName($tableName) 
	{
		if (false !== strpos($tableName,"tbl_p_")) 
		{
			return $this->toProperName($tableName)."_Eng";
		} 
		elseif (false !== strpos($tableName,"tbl_c_")) 
		{
			return "c".$this->toProperName($tableName)."_Eng";
		}
		else
		{
			throw new \exception("Invalid table name: ".$tableName);
		}
	}	

	/**
	 * generate
	 */
	public function generate() 
	{

		// skip tables that do not begin with tbl_c_ or tbl_p_
		if ( !preg_match('/^tbl_[pc]_/', $this->getTable()->name )) return "";

		$templateVariable 	= $this->getFormatter($this->getTable()->name)->strip(array('tbl_c_','tbl_p_'))->toString();
		$templateClass 		= $this->toProperName($this->getTable()->name);

		$aOutput[] = <<<EOF
<?php

/**
 * abstract class {$templateClass}_Base
 *
 * This class defines an OO representation of the {$this->getTable()->name} table
 *
 * NOTE: This file is autogenerated from the {$this->getTable()->name} using
 * Generator.
 *
 * IMPORTANT: This file should NEVER BE CHANGED BY HAND. NEVER! Any changes
 * that need to be made should be made to the template file and replicated for
 * all tables.
 *
 * USAGE: This is an abstract class and thus it must be inherited. Create a
 * or modify business object to use this file. Business Objects are stored in
 * the "/classes/models/bo" directory.
 *
 * PHP version 5
 *
 * @category   Data Object
 * @author     D CLAY SMITH
 * @copyright  2007 D Clay Smith
 */

namespace akita\classes\models\do;

if (!defined('MEMCACHE_ENABLED')) define('MEMCACHE_ENABLED', 'false');

abstract class {$templateClass}_Base extends CDataObject {

	// CONSTRUCTOR
	function __construct() {
	}

	// VARIABLES
EOF;
		// add in a variable for each column
		foreach ($this->getTable()->getColumns() as $column) 
		{
			$aOutput[] = "\tprotected \$_".$this->toProperName($column->name).";";
		}

		// add in a variable to store relationship
		foreach ($this->getTables() as $table) {
			foreach ($table->getColumns() as $column) {
				$tableShort = $this->getFormatter($this->getTable()->name)->strip(array('tbl_c_','tbl_p_'))->toString();				
				if ($column->name == $tableShort."_id") {
					$aOutput[] = "\tprotected \$_col".$this->toPluralProperName($table->name).";";
				}
			}
		}

		foreach ($this->getTable()->columns as $column) {
			foreach ($this->getTables() as $table) {
				$tableShort = $this->getFormatter($table->name)->strip(array('tbl_c_','tbl_p_'))->toString();		
				if ($column->name == $tableShort."_id") {
					$aOutput[] = "\tprotected \$_o".$this->toProperName($column->name).";";
				}
			}
		}		

		$aOutput[] = <<<EOF


	// PROPERTIES
EOF;

		foreach ($this->getTable()->columns as $column) {
			switch ($column->name) {
				case "id":
				case "date_entered":
				case "date_modified":
				case "ts":
					continue;
					break;
				default:
					$sMethodName 	= str_replace(' ','',ucwords(str_replace('_',' ',str_replace('tbl_c_','',$column->name))));
					$sVariableName 	= str_replace(' ','',ucwords(str_replace('_',' ',str_replace('tbl_c_','',$column->name))));

		$aOutput[] = <<<EOF
	public function get{$sMethodName}() {
EOF;
					if ($column->type == "tinyint") {
		$aOutput[] = <<<EOF
		return (\$this->{$sVariableName}) ? 1 : 0;
EOF;
					} else {
		$aOutput[] = <<<EOF
		return \$this->_{$sVariableName};
EOF;
					}
		$aOutput[] = <<<EOF
	}
	public function set{$sMethodName}(\$value) {
EOF;
		switch ($column->type) {
			case "double":
				$aOutput[] = <<<EOF
		if (!is_numeric(\$value)) {
			throw new exception('Non-numeric value provided for set{$sMethodName}.');	
		}					
EOF;
				break;
			case "int":
			case "bigint":
				$aOutput[] = <<<EOF
		if (!is_int(\$value)) {
			throw new exception('Non-integer value provided for set{$sMethodName}.');	
		}	
EOF;
				break;
			case "tinyint":
				$aOutput[] = <<<EOF
		if (!(\$value === true || \$value === false)) {
			throw new exception('Non-boolean value provided for set{$sMethodName}.');	
		}		
EOF;
				break;
			case "datetime":
				$aOutput[] = <<<EOF
		if (!CValidation::isValidDatetime(\$value)) {
			throw new exception('Non-date value provided for set{$sMethodName}.');	
		}		
EOF;
				break;
			case "varchar":	
				$aOutput[] = <<<EOF
		if (strlen(stripslashes(\$value)) > {$column->length}) {
			throw new exception('The value provided for set{$sMethodName} exceeds the allowed length of {$column->length}.');				
		} 			
EOF;
				break;
		}
		
		$aOutput[] = <<<EOF

		if (\$this->_{$sVariableName} != \$value) {
			if (!\$this->getIsNew()) \$this->_aChanged[] = "{$sMethodName}";
			\$this->_isDirty = true;
		}
		\$this->_{$sVariableName} = \$value;
		return true;
	}
EOF;
					break;
			}
		}


		foreach ($this->getTables() as $table) {
			foreach ($table->getColumns() as $column) {
				$tableShort = $this->getFormatter($this->getTable()->name)->strip(array('tbl_c_','tbl_p_'))->toString();				
				if ($column->name == $tableShort."_id") {

					// /$sTableClass = $this->toPluralProperName($table->name);

					$aOutput[] = <<<EOF

	public function get{$this->toPluralProperName($table->name)}() {
		if (\$this->_col{$this->toPluralProperName($table->name)} == null) {
			\$aParams = array(array("","{$column->name}","=",\$this->getId()));
			if (!\$this->_col{$this->toPluralProperName($table->name)} = {$this->toProperName($table->name)}_Eng::search(\$aParams)) {
				throw new exception('Unable to retrieve the _col{$this->toPluralProperName($table->name)}.');
			}
		}
		return \$this->_col{$this->toPluralProperName($table->name)};
	}
EOF;

				}
			}
		}	


		foreach ($this->getTable()->getColumns() as $column) {
			foreach ($this->getTables() as $table) {
				$tableShort = $this->getFormatter($table->name)->strip(array('tbl_c_','tbl_p_'))->toString();	
				if ($column->name == $tableShort."_id") {

					$sColumnClass = $this->toProperName($column->name);

					$aOutput[] = <<<EOF

	public function get{$sColumnClass}() {
		if (\$this->_o{$sColumnClass} == null && \$this->get{$sColumnClass}Id() > 0) {			
			if (!\$this->_o{$sColumnClass} = {$this->toEngineClassName($table->name)}::get(\$this->get{$sColumnClass}Id(),false)) {
				throw new exception('Unable to retrieve the {$sColumnClass}.');			
			}
		}
		return \$this->_o{$sColumnClass};
	}
EOF;

				}
			}
		}		

		$aOutput[] = <<<EOF

	public function add() {

		// check for null values
		\$aNullValues = array();
EOF;
		foreach ($this->getTable()->getColumns() as $column) {
			switch ($column->name) {
				case "id": case "ts": case "date_entered": case "date_modified": case "uuid":
					break;
				default:
					if (!$column->nullable) {

						switch ($column->type) {
							case "int": case "bigint":
								$aOutput[] = "\t\tif (!is_int(\$this->get{$this->toProperName($column->name)}())) {";
								break;
							case "tinyint":
								$aOutput[] = "\t\tif (!(\$this->get{$this->toProperName($column->name)}() == true || \$this->get{$this->toProperName($column->name)}() == false)) {";		
								break;
							case "datetime":
								$aOutput[] = "\t\tif (!CValidation::isValidDatetime(\$this->get{$this->toProperName($column->name)}())) {";
								break;
							default:
								$aOutput[] = "\t\tif (strlen(\$this->get{$this->toProperName($column->name)}()) < 1) {";		
								break;
						}

						$sLabel = $this->getFormatter($column->name)->replace("_"," ")->toTitle()->toString();

						$aOutput[] = "\t\t\t\$aNullValues[] = \"{$sLabel}\";";
						$aOutput[] = "\t\t}";
					}
					break;
			}
		}

		$aOutput[] = <<<EOF

		if (count(\$aNullValues) > 0) {
			throw new exception('Insert failed. Null values were provided for the following non-null fields: '.implode(", ",\$sNullFields);
		}

		\$sUuid = CFunctions::getUuid('{$templateVariable}');
EOF;
		$aFields = array();
		foreach ($this->getTable()->getColumns() as $column) {
			switch ($column->name) {
				case "id": case "ts":
					break;
				default:	
					$key = $this->getFormatter($column->name)->replace("_"," ")->toTitle()->strip(' ')->toString();
					$aFields[$key] = $column->name;
					break;
			}
		}		

		$fields = "`".implode("`,`",$aFields)."`";
		$values = "':".implode("',':",$aFields)."'";

        $aOutput[] = "\t\t\$aSql = array();";
        $aOutput[] = "\t\t\$aSql[] = \"INSERT INTO\";";
        $aOutput[] = "\t\t\$aSql[] = \"`{$table->name}`\";";
        $aOutput[] = "\t\t\$aSql[] = \"($fields)\";";
        $aOutput[] = "\t\t\$aSql[] = \"VALUES\";";
        $aOutput[] = "\t\t\$aSql[] = \"($values)\";";

        $aOutput[] = "\t\t\$statement = \$this->getDbManager->prepare(implode(\" \",\$aSql));";

        foreach ($aFields as $variable => $field) {
        	if ($field == "uuid") {
        		$aOutput[] = "\t\t\$statement->bindParam(\":{$field}\",\$sUuid);";
        	} else {
        		$aOutput[] = "\t\t\$statement->bindParam(\":{$field}\",\$this->_".$variable.");";
        	}
        }

        $aOutput[] = "\t\t\$statement->execute();";

        $aOutput[] = <<<EOF

		if (!\$id = \$this->getDbManager()->lastInsertId('id')) {
			return false;
		} else {
			\$this->setId(\$id);
			\$this->setIsNew(false);
			\$this->setIsDirty(false);
			if (property_exists(\$this, '_Uuid')) \$this->setUuid(\$sUuid);
			return \$this;
		}
	}

	public function update() {

		if (MEMCACHE_ENABLED) CMemcache::delete("object_{$templateVariable}_".md5(\$this->getId()));

		\$aNullValues = array();
EOF;

		foreach ($this->getTable()->getColumns() as $column) {
			switch ($column->name) {
				case "id": case "ts": case "date_entered": case "date_modified": case "uuid":
					break;
				default:
					if (!$column->nullable) {
						switch ($column->type) {
							case "int": case "bigint":
								$aOutput[] = "\t\tif (!is_int(\$this->get{$this->toProperName($column->name)}())) {";
								break;
							case "tinyint":
								$aOutput[] = "\t\tif (!(\$this->get{$this->toProperName($column->name)}() == true || \$this->get{$this->toProperName($column->name)}() == false)) {";		
								break;
							case "datetime":
								$aOutput[] = "\t\tif (!CValidation::isValidDatetime(\$this->get{$this->toProperName($column->name)}())) {";
								break;
							default:
								$aOutput[] = "\t\tif (strlen(\$this->get{$this->toProperName($column->name)}()) < 1) {";		
								break;
						}
						
						$sLabel = $this->getFormatter($column->name)->replace("_"," ")->toTitle()->toString();

						$aOutput[] = "\t\t\t\$aNullValues[] = \"{$sLabel}\";";
						$aOutput[] = "\t\t}";
					}
					break;
			}
		}

		$aOutput[] = <<<EOF

		if (count(\$aNullValues) > 0) {
			throw new exception('Insert failed. Null values were provided for the following non-null fields: '.implode(", ",\$sNullFields);
		}
EOF;
		$aFields = array();
		foreach ($this->getTable()->getColumns() as $column) {
			switch ($column->name) {
				case "id": case "ts":
					break;
				default:	
					$key = $this->getFormatter($column->name)->replace("_"," ")->toTitle()->strip(' ')->toString();				
					$aFields[$key] = $column->name;
					break;
			}
		}

		$fields = "`".implode("`,`",$aFields)."`";
		$values = "':".implode("',':",$aFields)."'";

        $aOutput[] = "\t\t\$aSql = array();";
        $aOutput[] = "\t\t\$aSql[] = \"UPDATE\";";
        $aOutput[] = "\t\t\$aSql[] = \"`{$table->name}`\";";
        $aOutput[] = "\t\t\$aSql[] = \"SET\";";

        foreach ($aFields as $variable => $field) {
        	$aOutput[] = "\t\t\$aSql[] = \"`$field` = ':$field'\";";
        }
        $aOutput[] = "\t\t\$aSql[] = \"WHERE\";";
        $aOutput[] = "\t\t\$aSql[] = \"`id` = :id\";";

        foreach ($aFields as $key => $value) {

        }


        $aOutput[] = "\t\t\$statement = \$this->getDbManager->prepare(implode(\" \",\$aSql));";

        foreach ($aFields as $variable => $field) {
        	if ($field == "uuid") {
        		$aOutput[] = "\t\t\$statement->bindParam(\":{$field}\",\$sUuid);";
        	} else {
        		$aOutput[] = "\t\t\$statement->bindParam(\":{$field}\",\$this->_".$variable.");";
        	}
        }

        $aOutput[] = "\t\t\$statement->bindParam(\":id\",\$this->getId());";
        $aOutput[] = "\t\t\$statement->execute();";

		$aOutput[] = <<<EOF

		if (!\$this->getDbManager()->run_sql(\$sql)) {
			return false;
		} else {
			return \$this;
		}
	}

	public function delete() {

		if (MEMCACHE_ENABLED) CMemcache::delete("object_{$templateVariable}_".md5(\$this->getId()));

EOF;

		foreach ($this->getTables() as $table) {
			foreach ($table->getColumns() as $column) {
				if ($column->name == $templateVariable."_id") {
        			$aOutput[] = "\t\t".$this->toEngineClassName($table->name)."::deleteWhere(array(array(\"\",\"{$templateVariable}_id\",\"=\",\$this->getId())));";
				}
			}
		}

		$aOutput[] = <<<EOF

		\$aSql = array();
		\$aSql[] = "DELETE FROM `{$this->getTable()->name}` WHERE id = :id";
		\$statement = \$this->getDbManager->prepare(implode(" ",\$aSql));
		\$statement->bindParam(":id",\$this->getId());

		if (!\$statement->execute()) {
			return false;
		} else {
			return true;
		}
	}
}
EOF;

		$typeTable = "tbl_t_".$templateVariable;
		if (array_key_exists($typeTable, $this->getTables())) {
			$tables = $this->getTables();
			$table = $tables[$typeTable];
			foreach ($table->getRows() as $row) {
				$aOutput[] = <<<EOF
/**	
 * abstract class CLASSNAME_cCHILDCLASS_Base
 *
 * @category   Data Object 
 * @author     D CLAY SMITH
 * @copyright  2007 D Clay Smith
 *
 */
abstract class CLASSNAME_cCHILDCLASS_Base extends BASECLASS {
}

EOF;

			}
		}

		$aOutput[] = <<<EOF

/**
 * class {$this->toEngineClassName($this->getTable()->name)}
 *
 * This class exposes the base functions for manipulating the data object
 *
 * NOTE: This file is autogenerated from the {$this->getTable()->name} using
 * the CG2K6.
 *
 * IMPORTANT: This file should not be changed by hand. Any changes
 * that need to be made should be made to the template file and replicated for
 * all tables.
 *
 * USAGE: This is an abstract class and thus it must be inherited. Create a
 * or modify business object to use this file. Business Objects are stored in
 * the "/bo" directory.
 *
 * PHP version 5
 *
 * @category   Data Object
 * @author     D CLAY SMITH
 * @copyright  2007 D Clay Smith
 */
class {$this->toEngineClassName($this->getTable()->name)} {

	/**
	 * Constructor
	 */
	function __construct() {
		throw new exception('Do not instantiate this class. Use static methods.');
	}
}
?>
EOF;




		return implode("\n",$aOutput);
	}

}
?>