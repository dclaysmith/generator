<?php

namespace dclaysmith\Generator\Template;

use dclaysmith\Generator\Template;
use dclaysmith\Generator\Formatter;
use dclaysmith\Generator\Database\Table;
use dclaysmith\Generator\Database\Table\Column;

class DataObjectTemplate extends TableTemplate 
{

  /**
   * generate
   */
  public function generate() 
  {

    // skip tables that do not begin with tbl_c_ or tbl_p_
    if ( !preg_match('/^tbl_[pc]_/', $this->getTable()->name )) return "";

    $templateVariable     = $this->getFormatter($this->getTable()->name)->strip(array('tbl_c_','tbl_p_'))->toString(); // method_of_contact
    $templateClass        = $this->toProperName($this->getTable()->name); // MethodOfContact
    $templateClassLower   = $this->getFormatter($templateClass)->toLower()->toString(); // methodofcontact
    $templateClassPlural  = $this->getFormatter($this->toProperName($this->getTable()->name))->pluralize()->toString();
    $typeTable        = "tbl_t_".$templateVariable;

    $aOutput[] = <<<EOF
<?php

/**
 * abstract class {$templateClass}_Base
 *
 * This class defines an OO representation of the {$this->getTable()->name} table
 *
 * NOTE: This file is autogenerated from the {$this->getTable()->name} using
 * Generator.
 *
 * IMPORTANT: This file should NEVER BE CHANGED BY HAND. NEVER! Any changes
 * that need to be made should be made to the template file and replicated for
 * all tables.
 *
 * USAGE: This is an abstract class and thus it must be inherited. Create a
 * or modify business object to use this file. Business Objects are stored in
 * the "/classes/models/bo" directory.
 *
 * PHP version 5
 *
 * @category   Data Object
 * @author     D CLAY SMITH
 * @copyright  2007 D Clay Smith
 */

namespace akita\classes\models\do;

if (!defined('MEMCACHE_ENABLED')) define('MEMCACHE_ENABLED', 'false');

abstract class {$templateClass}_Base extends CDataObject {

  // CONSTRUCTOR
  function __construct() {
  }

  // VARIABLES
EOF;
    // add in a variable for each column
    foreach ($this->getTable()->getColumns() as $column) 
    {
      $aOutput[] = "\tprotected \$_".$this->toProperName($column->name).";";
    }

    // add in a variable to store relationship
    foreach ($this->getTables() as $table) {
      foreach ($table->getColumns() as $column) {
        $tableShort = $this->getFormatter($this->getTable()->name)->strip(array('tbl_c_','tbl_p_'))->toString();        
        if ($column->name == $tableShort."_id") {
          $aOutput[] = "\tprotected \$_col".$this->toPluralProperName($table->name).";";
        }
      }
    }

    foreach ($this->getTable()->columns as $column) {
      foreach ($this->getTables() as $table) {
        $tableShort = $this->getFormatter($table->name)->strip(array('tbl_c_','tbl_p_'))->toString();   
        if ($column->name == $tableShort."_id") {
          $aOutput[] = "\tprotected \$_o".$this->toProperName($column->name).";";
        }
      }
    }   

    $aOutput[] = <<<EOF


  // PROPERTIES
EOF;

    foreach ($this->getTable()->columns as $column) {
      switch ($column->name) {
        case "id":
        case "date_entered":
        case "date_modified":
        case "ts":
          continue;
          break;
        default:
          $aOutput[] = $this->generateParentGettersSetters($column);
          break;
      }
    }


    foreach ($this->getTables() as $table) {
      foreach ($table->getColumns() as $column) {
        $tableShort = $this->getFormatter($this->getTable()->name)->strip(array('tbl_c_','tbl_p_'))->toString();        
        if ($column->name == $tableShort."_id") {

          // /$sTableClass = $this->toPluralProperName($table->name);

          $aOutput[] = <<<EOF

  public function get{$this->toPluralProperName($table->name)}() {
    if (\$this->_col{$this->toPluralProperName($table->name)} == null) {
      \$aParams = array(array("","{$column->name}","=",\$this->getId()));
      if (!\$this->_col{$this->toPluralProperName($table->name)} = {$this->toProperName($table->name)}_Eng::search(\$aParams)) {
        throw new exception('Unable to retrieve the _col{$this->toPluralProperName($table->name)}.');
      }
    }
    return \$this->_col{$this->toPluralProperName($table->name)};
  }
EOF;

        }
      }
    } 


    foreach ($this->getTable()->getColumns() as $column) {
      foreach ($this->getTables() as $table) {
        $tableShort = $this->getFormatter($table->name)->strip(array('tbl_c_','tbl_p_'))->toString(); 
        if ($column->name == $tableShort."_id") {

          $sColumnClass = $this->toProperName($column->name);

          $aOutput[] = <<<EOF

  public function get{$sColumnClass}() {
    if (\$this->_o{$sColumnClass} == null && \$this->get{$sColumnClass}Id() > 0) {      
      if (!\$this->_o{$sColumnClass} = {$this->toEngineClassName($table->name)}::get(\$this->get{$sColumnClass}Id(),false)) {
        throw new exception('Unable to retrieve the {$sColumnClass}.');     
      }
    }
    return \$this->_o{$sColumnClass};
  }
EOF;

        }
      }
    }   

    $aOutput[] = <<<EOF

  public function add() {

    // check for null values
    \$aNullValues = array();
EOF;
    foreach ($this->getTable()->getColumns() as $column) {
      switch ($column->name) {
        case "id": case "ts": case "date_entered": case "date_modified": case "uuid":
          break;
        default:
          if (!$column->nullable) {

            switch ($column->type) {
              case "int": case "bigint":
                $aOutput[] = "\t\tif (!is_int(\$this->get{$this->toProperName($column->name)}())) {";
                break;
              case "tinyint":
                $aOutput[] = "\t\tif (!(\$this->get{$this->toProperName($column->name)}() == true || \$this->get{$this->toProperName($column->name)}() == false)) {";   
                break;
              case "datetime":
                $aOutput[] = "\t\tif (!CValidation::isValidDatetime(\$this->get{$this->toProperName($column->name)}())) {";
                break;
              default:
                $aOutput[] = "\t\tif (strlen(\$this->get{$this->toProperName($column->name)}()) < 1) {";    
                break;
            }

            $sLabel = $this->getFormatter($column->name)->replace("_"," ")->toTitle()->toString();

            $aOutput[] = "\t\t\t\$aNullValues[] = \"{$sLabel}\";";
            $aOutput[] = "\t\t}";
          }
          break;
      }
    }

    $aOutput[] = <<<EOF

    if (count(\$aNullValues) > 0) {
      throw new exception('Insert failed. Null values were provided for the following non-null fields: '.implode(", ",\$sNullFields);
    }

    \$sUuid = CFunctions::getUuid('{$templateVariable}');
EOF;
    $aFields = array();
    foreach ($this->getTable()->getColumns() as $column) {
      switch ($column->name) {
        case "id": case "ts":
          break;
        default:  
          $key = $this->getFormatter($column->name)->replace("_"," ")->toTitle()->strip(' ')->toString();
          $aFields[$key] = $column->name;
          break;
      }
    }   

    $fields = "`".implode("`,`",$aFields)."`";
    $values = "':".implode("',':",$aFields)."'";

        $aOutput[] = "\t\t\$aSql = array();";
        $aOutput[] = "\t\t\$aSql[] = \"INSERT INTO\";";
        $aOutput[] = "\t\t\$aSql[] = \"`{$this->getTable()->name}`\";";
        $aOutput[] = "\t\t\$aSql[] = \"($fields)\";";
        $aOutput[] = "\t\t\$aSql[] = \"VALUES\";";
        $aOutput[] = "\t\t\$aSql[] = \"($values)\";";

        $aOutput[] = "\t\t\$statement = \$this->getDbManager->prepare(implode(\" \",\$aSql));";

        foreach ($aFields as $variable => $field) {
          if ($field == "uuid") {
            $aOutput[] = "\t\t\$statement->bindParam(\":{$field}\",\$sUuid);";
          } else {
            $aOutput[] = "\t\t\$statement->bindParam(\":{$field}\",\$this->_".$variable.");";
          }
        }

        $aOutput[] = "\t\t\$statement->execute();";

        $aOutput[] = <<<EOF

    if (!\$id = \$this->getDbManager()->lastInsertId('id')) {
      return false;
    } else {
      \$this->setId(\$id);
      \$this->setIsNew(false);
      \$this->setIsDirty(false);
      if (property_exists(\$this, '_Uuid')) \$this->setUuid(\$sUuid);
      return \$this;
    }
  }

  public function update() {

    if (MEMCACHE_ENABLED) CMemcache::delete("object_{$templateVariable}_".md5(\$this->getId()));

    \$aNullValues = array();
EOF;

    foreach ($this->getTable()->getColumns() as $column) {
      switch ($column->name) {
        case "id": case "ts": case "date_entered": case "date_modified": case "uuid":
          break;
        default:
          if (!$column->nullable) {
            switch ($column->type) {
              case "int": case "bigint":
                $aOutput[] = "\t\tif (!is_int(\$this->get{$this->toProperName($column->name)}())) {";
                break;
              case "tinyint":
                $aOutput[] = "\t\tif (!(\$this->get{$this->toProperName($column->name)}() == true || \$this->get{$this->toProperName($column->name)}() == false)) {";   
                break;
              case "datetime":
                $aOutput[] = "\t\tif (!CValidation::isValidDatetime(\$this->get{$this->toProperName($column->name)}())) {";
                break;
              default:
                $aOutput[] = "\t\tif (strlen(\$this->get{$this->toProperName($column->name)}()) < 1) {";    
                break;
            }
            
            $sLabel = $this->getFormatter($column->name)->replace("_"," ")->toTitle()->toString();

            $aOutput[] = "\t\t\t\$aNullValues[] = \"{$sLabel}\";";
            $aOutput[] = "\t\t}";
          }
          break;
      }
    }

    $aOutput[] = <<<EOF

    if (count(\$aNullValues) > 0) {
      throw new exception('Insert failed. Null values were provided for the following non-null fields: '.implode(", ",\$sNullFields);
    }
EOF;
    $aFields = array();
    foreach ($this->getTable()->getColumns() as $column) {
      switch ($column->name) {
        case "id": case "ts":
          break;
        default:  
          $key = $this->getFormatter($column->name)->replace("_"," ")->toTitle()->strip(' ')->toString();       
          $aFields[$key] = $column->name;
          break;
      }
    }

    $fields = "`".implode("`,`",$aFields)."`";
    $values = "':".implode("',':",$aFields)."'";

        $aOutput[] = "\t\t\$aSql = array();";
        $aOutput[] = "\t\t\$aSql[] = \"UPDATE\";";
        $aOutput[] = "\t\t\$aSql[] = \"`{$this->getTable()->name}`\";";
        $aOutput[] = "\t\t\$aSql[] = \"SET\";";

        foreach ($aFields as $variable => $field) {
          $aOutput[] = "\t\t\$aSql[] = \"`$field` = ':$field'\";";
        }
        $aOutput[] = "\t\t\$aSql[] = \"WHERE\";";
        $aOutput[] = "\t\t\$aSql[] = \"`id` = :id\";";

        foreach ($aFields as $key => $value) {

        }


        $aOutput[] = "\t\t\$statement = \$this->getDbManager->prepare(implode(\" \",\$aSql));";

        foreach ($aFields as $variable => $field) {
          if ($field == "uuid") {
            $aOutput[] = "\t\t\$statement->bindParam(\":{$field}\",\$sUuid);";
          } else {
            $aOutput[] = "\t\t\$statement->bindParam(\":{$field}\",\$this->_".$variable.");";
          }
        }

        $aOutput[] = "\t\t\$statement->bindParam(\":id\",\$this->getId());";
        $aOutput[] = "\t\t\$statement->execute();";

    $aOutput[] = <<<EOF

    if (!\$this->getDbManager()->run_sql(\$sql)) {
      return false;
    } else {
      return \$this;
    }
  }

  public function delete() {

    if (MEMCACHE_ENABLED) CMemcache::delete("object_{$templateVariable}_".md5(\$this->getId()));

EOF;

    foreach ($this->getTables() as $table) {
      foreach ($table->getColumns() as $column) {
        if ($column->name == $templateVariable."_id") {
              $aOutput[] = "\t\t".$this->toEngineClassName($table->name)."::deleteWhere(array(array(\"\",\"{$templateVariable}_id\",\"=\",\$this->getId())));";
        }
      }
    }

    $aOutput[] = <<<EOF

    \$aSql = array();
    \$aSql[] = "DELETE FROM `{$this->getTable()->name}` WHERE id = :id";
    \$statement = \$this->getDbManager->prepare(implode(" ",\$aSql));
    \$statement->bindParam(":id",\$this->getId());

    if (!\$statement->execute()) {
      return false;
    } else {
      return true;
    }
  }
}
EOF;

    $tables   = $this->getTables();
    if (array_key_exists($typeTable, $tables)) {
      $table = $tables[$typeTable];
      foreach ($table->getRows() as $row) {

        $type         = $this->toProperName($row["type"]);

        $childObjectName  = "_oc".$templateClass.$type;

        $aOutput[] = <<<EOF
/** 
 * abstract class {$templateClass}_c{$type}_Base
 *
 * @category   Data Object 
 * @author     D CLAY SMITH
 * @copyright  2007 D Clay Smith
 *
 */
abstract class {$templateClass}_c{$type}_Base extends {$templateClass}_Base {

  // VARIABLES
  public \${$childObjectName};

  // PROPERTIES
EOF;
    
        $childTableName = $this->getFormatter($this->getTable()->getName())
                  ->strip(array('tbl_p_'))
                  ->prepend('tbl_c_')
                  ->append('_'.$type)
                  ->toLower()
                  ->toString();

        if (array_key_exists($childTableName, $tables)) {
          $childTable = $tables[$childTableName];
          foreach ($childTable->getColumns() as $column) {
            switch ($column->name) {
              case "id":
              case "date_entered":
              case "date_modified":
              case "ts":
                continue;
                break;
              default:
                $columnNameProper = $this->getFormatter($column->name)
                              ->toTitle()
                              ->strip("_")
                              ->replace("-","_")
                              ->toString();

                $childEngineClassName = $this->toEngineClassName($childTable->name);

                $aOutput[] = <<<EOF
  /**
   * Property get/set{$columnNameProper}()
   */
  public function get{$columnNameProper}() {

    if (\$this->{$childObjectName} == null) {
      \$this->{$childObjectName} = {$childEngineClassName}::get(\$this->getId(),true,"tbl_c_method_of_contact_address","methodofcontact_id");
      if (\$this->{$childObjectName} == null) {
        \$this->{$childObjectName} = {$childEngineClassName}::newcMethodOfContactAddress();
        if (\$this->getId() > 0) \$this->{$childObjectName}->set{$columnNameProper}(\$this->getId());
      }
    }
    return \$this->{$childObjectName}->get{$columnNameProper}();
  }

  public function set{$columnNameProper}(\$value) {
      if (\$this->get{$columnNameProper}() != \$value) {
        \$this->{$childObjectName}->setIsDirty(true);
        \$this->setIsDirty(true);
      }
      \$this->{$childObjectName}->set{$columnNameProper}(\$value);      
      return true;
  }


EOF;

                break;
            }
          }
        }

        $aOutput[] = <<<EOF

  public function add() {

    // check for null values
    \$aNullValues = array();
EOF;
    foreach ($this->getTable()->getColumns() as $column) {
      switch ($column->name) {
        case "id": case "ts": case "date_entered": case "date_modified": case "uuid":
          break;
        default:
          if (!$column->nullable) {

            switch ($column->type) {
              case "int": case "bigint":
                $aOutput[] = "\t\tif (!is_int(\$this->get{$this->toProperName($column->name)}())) {";
                break;
              case "tinyint":
                $aOutput[] = "\t\tif (!(\$this->get{$this->toProperName($column->name)}() == true || \$this->get{$this->toProperName($column->name)}() == false)) {";   
                break;
              case "datetime":
                $aOutput[] = "\t\tif (!CValidation::isValidDatetime(\$this->get{$this->toProperName($column->name)}())) {";
                break;
              default:
                $aOutput[] = "\t\tif (strlen(\$this->get{$this->toProperName($column->name)}()) < 1) {";    
                break;
            }

            $sLabel = $this->getFormatter($column->name)->replace("_"," ")->toTitle()->toString();

            $aOutput[] = "\t\t\t\$aNullValues[] = \"{$sLabel}\";";
            $aOutput[] = "\t\t}";
          }
          break;
      }
    }

    $aOutput[] = <<<EOF

    if (count(\$aNullValues) > 0) {
      throw new exception('Insert failed. Null values were provided for the following non-null fields: '.implode(", ",\$sNullFields);
    }

    \$sUuid = CFunctions::getUuid('{$templateVariable}');
EOF;
    $aFields = array();
    foreach ($this->getTable()->getColumns() as $column) {
      switch ($column->name) {
        case "id": case "ts":
          break;
        default:  
          $key = $this->getFormatter($column->name)->replace("_"," ")->toTitle()->strip(' ')->toString();
          $aFields[$key] = $column->name;
          break;
      }
    }   

    $fields = "`".implode("`,`",$aFields)."`";
    $values = "':".implode("',':",$aFields)."'";

        $aOutput[] = "\t\t\$aSql = array();";
        $aOutput[] = "\t\t\$aSql[] = \"INSERT INTO\";";
        $aOutput[] = "\t\t\$aSql[] = \"`{$this->getTable()->name}`\";";
        $aOutput[] = "\t\t\$aSql[] = \"($fields)\";";
        $aOutput[] = "\t\t\$aSql[] = \"VALUES\";";
        $aOutput[] = "\t\t\$aSql[] = \"($values)\";";

        $aOutput[] = "\t\t\$statement = \$this->getDbManager->prepare(implode(\" \",\$aSql));";

        foreach ($aFields as $variable => $field) {
          if ($field == "uuid") {
            $aOutput[] = "\t\t\$statement->bindParam(\":{$field}\",\$sUuid);";
          } else {
            $aOutput[] = "\t\t\$statement->bindParam(\":{$field}\",\$this->_".$variable.");";
          }
        }

        $aOutput[] = "\t\t\$statement->execute();";

        $aOutput[] = <<<EOF

    if (!\$id = \$this->getDbManager()->lastInsertId('id')) {
      return false;
    } else {
      \$this->setId(\$id);
      \$this->setIsNew(false);
      \$this->setIsDirty(false);
      if (property_exists(\$this, '_Uuid')) \$this->setUuid(\$sUuid);

      {$childEngineClassName}::save(\$this->{$childObjectName});

      return \$this;
    }
  }


  public function update() {

    if (MEMCACHE_ENABLED) CMemcache::delete("object_{$templateVariable}_".md5(\$this->getId()));

    \$aNullValues = array();
EOF;

    foreach ($this->getTable()->getColumns() as $column) {
      switch ($column->name) {
        default:
          if (!$column->nullable) {
            switch ($column->type) {
              case "int": case "bigint":
                $aOutput[] = "\t\tif (!is_int(\$this->get{$this->toProperName($column->name)}())) {";
                break;
              case "tinyint":
                $aOutput[] = "\t\tif (!(\$this->get{$this->toProperName($column->name)}() == true || \$this->get{$this->toProperName($column->name)}() == false)) {";   
                break;
              case "datetime":
                $aOutput[] = "\t\tif (!CValidation::isValidDatetime(\$this->get{$this->toProperName($column->name)}())) {";
                break;
              default:
                $aOutput[] = "\t\tif (strlen(\$this->get{$this->toProperName($column->name)}()) < 1) {";    
                break;
            }
            
            $sLabel = $this->getFormatter($column->name)->replace("_"," ")->toTitle()->toString();

            $aOutput[] = "\t\t\t\$aNullValues[] = \"{$sLabel}\";";
            $aOutput[] = "\t\t}";
          }
          break;
      }
    }

    $aOutput[] = <<<EOF

    if (count(\$aNullValues) > 0) {
      throw new exception('Insert failed. Null values were provided for the following non-null fields: '.implode(", ",\$sNullFields);
    }
EOF;
    $aFields = array();
    foreach ($this->getTable()->getColumns() as $column) {
      switch ($column->name) {
        case "id": case "ts":
          break;
        default:  
          $key = $this->getFormatter($column->name)->replace("_"," ")->toTitle()->strip(' ')->toString();       
          $aFields[$key] = $column->name;
          break;
      }
    }

    $fields = "`".implode("`,`",$aFields)."`";
    $values = "':".implode("',':",$aFields)."'";

    $aOutput[] = "\t\t\$aSql = array();";
    $aOutput[] = "\t\t\$aSql[] = \"UPDATE\";";
    $aOutput[] = "\t\t\$aSql[] = \"`{$this->getTable()->name}`\";";
    $aOutput[] = "\t\t\$aSql[] = \"SET\";";

    foreach ($aFields as $variable => $field) {
      $aOutput[] = "\t\t\$aSql[] = \"`$field` = ':$field'\";";
    }
    $aOutput[] = "\t\t\$aSql[] = \"WHERE\";";
    $aOutput[] = "\t\t\$aSql[] = \"`id` = :id\";";

    $aOutput[] = "\t\t\$statement = \$this->getDbManager->prepare(implode(\" \",\$aSql));";

    foreach ($aFields as $variable => $field) {
      if ($field == "uuid") {
        $aOutput[] = "\t\t\$statement->bindParam(\":{$field}\",\$sUuid);";
      } else {
        $aOutput[] = "\t\t\$statement->bindParam(\":{$field}\",\$this->_".$variable.");";
      }
    }

    $aOutput[] = "\t\t\$statement->bindParam(\":id\",\$this->getId());";

    $aOutput[] = <<<EOF

    if (!\$statement->execute()) {
      return false;
    } else {
      {$childEngineClassName}::save(\$this->{$childObjectName});
      return \$this;
    }
  }


}

EOF;

      }
    }

    $aOutput[] = <<<EOF

/**
 * class {$this->toEngineClassName($this->getTable()->name)}
 *
 * This class exposes the base functions for manipulating the data object
 *
 * NOTE: This file is autogenerated from the {$this->getTable()->name} using
 * Generator.
 *
 * https://github.com/dclaysmith/generator
 *
 * IMPORTANT: This file should not be changed by hand. Any changes
 * that need to be made should be made to the template file and replicated for
 * all tables.
 *
 * USAGE: This is an abstract class and thus it must be inherited. Create a
 * or modify business object to use this file. Business Objects are stored in
 * the "/bo" directory.
 *
 * PHP version 5
 *
 * @category   Data Object
 * @author     D CLAY SMITH
 * @copyright  2007 D Clay Smith
 */
class {$this->toEngineClassName($this->getTable()->name)} {

  /*
   * Constructor
   */
  function __construct() {
    throw new exception('Do not instantiate this class. Use static methods.');
  }
EOF;
    
    $tables   = $this->getTables();
    if (array_key_exists($typeTable, $tables)) {
      $table = $tables[$typeTable];
      foreach ($table->getRows() as $row) {

        $type         = $this->toProperName($row["type"]);

        $childObjectName  = "_oc".$templateClass.$type;

        $aOutput[] = <<<EOF

  /**
   * new{$templateClass}_{$type}
   */
  static function new{$templateClass}_{$type}() {

      \$o{$templateClass}_{$type} = new {$templateClass}_c{$type};
      \$o{$templateClass}_{$type}->setIsNew(true);
      \$o{$templateClass}_{$type}->setDateEntered(time());
      \$o{$templateClass}_{$type}->setDateModified(time());
      \$o{$templateClass}_{$type}->setMethodOfContactTypeID({$row["id"]});
      return \$o{$templateClass}_{$type};
  }

EOF;
      }
    }

    $aOutput[] = <<<EOF

  /**
   * count
   */
  static function count(\$aParams=null, 
              \$bUseSlave=false) {
      
    \$aSql = array();
    \$aSql[] = "SELECT";
    \$aSql[] = "COUNT(`{$this->getTable()->name}`.`id`) AS count";
    \$aSql[] = "FROM `{$this->getTable()->name}` ";
EOF;

    // if this table has a type table, we need to join child tables
    $tables   = $this->getTables();
    if (array_key_exists($typeTable, $tables)) {
      foreach ($this->getTables() as $table) {
        if (false !== strpos($table->name, $templateVariable) && false !== strpos($table->name, "tbl_c_")) {
          $aOutput[] = <<<EOF
    \$aSql[] = "LEFT JOIN `{$table->name}` ON `{$table->name}`.`{$templateVariable}_id` = `{$this->getTable()->name}`.`id`";
EOF;
        }
      }
    }

    $tables   = $this->getTables();
    foreach ($this->getTable()->getColumns() as $column) {
      $tableName = $this->getFormatter($column->name)->strip(array("_id"))->prepend("tbl_p_")->toString();
      if (array_key_exists($tableName, $tables)) {
        $aOutput[] = <<<EOF
    \$aSql[] = "LEFT JOIN `{$tableName}` ON `{$tableName}`.`id` = `{$this->getTable()->name}`.`{$column->name}`";
EOF;
      }
    }

    // add any search parameters
    $aOutput[] = <<<EOF

    if (count(\$aParams)) {
      \$aWhereClauses = array();
      foreach (\$aParams as \$param) {
        \$paramTable     = (\$param[0]) ? \$param[0] : \$this->getTable()->name;
        \$paramField     = \$param[1];
        \$paramOperator  = \$param[2];
        \$paramValue     = \$param[3];

        switch (\$paramOperator) {
          case "=":
            \$aWhereClauses[] = "`".\$paramTable."`.`".\$paramField."` = ?";
            break;
          case "<>":
            \$aWhereClauses[] = "`".\$paramTable."`.`".\$paramField."` = ?";
            break;
          case "IN":
            \$aWhereClauses[] = "`".\$paramTable."`.`".\$paramField."` IN (?)";
            break;
          case "LIKE":
            \$aWhereClauses[] = "`".\$paramTable."`.`".\$paramField."` LIKE ?";
            break;
          case "%LIKE%";
            \$aWhereClauses[] = "`".\$paramTable."`.`".\$paramField."` LIKE %?%";
            break;
          case "LIKE%";
            \$aWhereClauses[] = "`".\$paramTable."`.`".\$paramField."` LIKE ?%";
            break;
          case "%LIKE";
            \$aWhereClauses[] = "`".\$paramTable."`.`".\$paramField."` LIKE %?";
            break;
          case "<";
            \$aWhereClauses[] = "`".\$paramTable."`.`".\$paramField."` < ?";
            break;
          case ">";
            \$aWhereClauses[] = "`".\$paramTable."`.`".\$paramField."` > ?";
            break;
          default:
            throw new exception("Invalid search operator: " . \$paramOperator);
        }
      }
      \$aSql[] = "WHERE ".implode(" AND ", \$aWhereClauses);
    }
EOF;

    $aOutput[] = <<<EOF

    \$statement = \$this->getDbManager()->prepare(implode(" ",\$aSql));
EOF;
    $aOutput[] = <<<EOF

    foreach (\$aParams as \$param) {
        \$paramField     = \$param[1];
        \$paramValue     = \$param[3];
        \$statement->bindParam(":".\$paramField,\$paramValue);
    }

    \$statement->execute();
    return \$statement->fetchColumn();
  }

  /**
   * search
   */
  static function search(\$aParams=null,
              \$aSortFields=null,
              \$bBulkLoad=false,
              \$bUseSlave=false,
              \$iStart=null,
              \$iLimit=null) {

    \$aSql = array();
    \$aSql[] = "SELECT";

    // add fields from this table
EOF;
    foreach ($this->getTable()->getColumns() as $column) {
      $aOutput[] = <<<EOF
    \$aFields[] = "`{$this->getTable()->name}`.`{$column->name}` AS `{$templateClassLower}__{$column->name}`";
EOF;
    }
    $tables   = $this->getTables();
    if (array_key_exists($typeTable, $tables)) {
      foreach ($this->getTables() as $table) {
        if (false !== strpos($table->name, $templateVariable) && false !== strpos($table->name, "tbl_c_")) {
          foreach ($table->getColumns() as $column) {
            $type = $this->getFormatter($table->name)->strip(array("tbl_c_",$templateVariable."_"))->toString();
            $aOutput[] = <<<EOF
    \$aFields[] = "`{$table->name}`.`{$column->name}` AS `{$type}__{$column->name}`";
EOF;
          }
        }
      }
    }

    $aOutput[] = <<<EOF
    if (\$bBulkLoad) {
EOF;
      $tables   = $this->getTables();
      foreach ($this->getTable()->getColumns() as $column) {
        $tableName = $this->getFormatter($column->name)->strip(array("_id"))->prepend("tbl_p_")->toString();
        if (array_key_exists($tableName, $tables)) {
          $table = $tables[$tableName];
          foreach ($table->getColumns() as $column) {
            $tableAbbreviation = $this->getFormatter($table->name)->strip(array("tbl_p_","_"))->toString();
            $aOutput[] = <<<EOF
    \t\$aFields[] = "`{$table->name}`.`{$column->name}` AS `{$tableAbbreviation}__{$column->name}`";
EOF;
          }
        }
      }

    $aOutput[] = <<<EOF
    }
EOF;

    $aOutput[] = <<<EOF
    \$aSql[] = implode(", ",\$aFields);
    \$aSql[] = "FROM `{$this->getTable()->name}` ";
EOF;

    // if this table has a type table, we need to join child tables
    $tables   = $this->getTables();
    if (array_key_exists($typeTable, $tables)) {
      foreach ($this->getTables() as $table) {
        if (false !== strpos($table->name, $templateVariable) && false !== strpos($table->name, "tbl_c_")) {
          $aOutput[] = <<<EOF
    \$aSql[] = "LEFT JOIN `{$table->name}` ON `{$table->name}`.`{$templateVariable}_id` = `{$this->getTable()->name}`.`id`";
EOF;
        }
      }
    }

    // also join any tables which contain 
    $tables   = $this->getTables();
    foreach ($this->getTable()->getColumns() as $column) {
      $tableName = $this->getFormatter($column->name)->strip(array("_id"))->prepend("tbl_p_")->toString();
      if (array_key_exists($tableName, $tables)) {
        $aOutput[] = <<<EOF
    \$aSql[] = "LEFT JOIN `{$tableName}` ON `{$tableName}`.`id` = `{$this->getTable()->name}`.`{$column->name}`";
EOF;
      }
    }

    // add any search parameters
    $aOutput[] = <<<EOF

    if (count(\$aParams)) {
      \$aWhereClauses = array();
      foreach (\$aParams as \$param) {
        \$paramTable     = (\$param[0]) ? \$param[0] : \$this->getTable()->name;
        \$paramField     = \$param[1];
        \$paramOperator  = \$param[2];
        \$paramValue     = \$param[3];

        switch (\$paramOperator) {
          case "=":
            \$aWhereClauses[] = "`".\$paramTable."`.`".\$paramField."` = ?";
            break;
          case "<>":
            \$aWhereClauses[] = "`".\$paramTable."`.`".\$paramField."` = ?";
            break;
          case "IN":
            \$aWhereClauses[] = "`".\$paramTable."`.`".\$paramField."` IN (?)";
            break;
          case "LIKE":
            \$aWhereClauses[] = "`".\$paramTable."`.`".\$paramField."` LIKE ?";
            break;
          case "%LIKE%";
            \$aWhereClauses[] = "`".\$paramTable."`.`".\$paramField."` LIKE %?%";
            break;
          case "LIKE%";
            \$aWhereClauses[] = "`".\$paramTable."`.`".\$paramField."` LIKE ?%";
            break;
          case "%LIKE";
            \$aWhereClauses[] = "`".\$paramTable."`.`".\$paramField."` LIKE %?";
            break;
          case "<";
            \$aWhereClauses[] = "`".\$paramTable."`.`".\$paramField."` < ?";
            break;
          case ">";
            \$aWhereClauses[] = "`".\$paramTable."`.`".\$paramField."` > ?";
            break;
          default:
            throw new exception("Invalid search operator: " . \$paramOperator);
        }
      }
      \$aSql[] = "WHERE ".implode(" AND ", \$aWhereClauses);
    }
EOF;

    $aOutput[] = <<<EOF

    // add the sort clause
    if (!is_null(\$aSortFields) && is_array(\$aSortFields)) {
      \$aSql[] = "ORDER BY ".implode(",", \$aSortFields);
    }

    // add the limit clause
    if (\$iLimit != null) {
      \$aSql[] = "LIMIT ".\$iStart.", ".\$iLimit;
    }

    \$statement = \$this->getDbManager()->prepare(implode(" ",\$aSql));

    foreach (\$aParams as \$param) {
        \$paramField     = \$param[1];
        \$paramValue     = \$param[3];
        \$statement->bindParam(":".\$paramField,\$paramValue);
    }

    \$statement->execute();
    return \$statement->fetchAll();
  }

  /**
   * countSpecial
   */
  static function countSpecial(\$sSql,
              \$bUseSlave=false) {
      
    \$aSql = array();
    \$aSql[] = "SELECT";
    \$aSql[] = "COUNT(`{$this->getTable()->name}`.`id`) AS count";
    \$aSql[] = "FROM `{$this->getTable()->name}` ";
EOF;

    // if this table has a type table, we need to join child tables
    $tables   = $this->getTables();
    if (array_key_exists($typeTable, $tables)) {
      foreach ($this->getTables() as $table) {
        if (false !== strpos($table->name, $templateVariable) && false !== strpos($table->name, "tbl_c_")) {
          $aOutput[] = <<<EOF
    \$aSql[] = "LEFT JOIN `{$table->name}` ON `{$table->name}`.`{$templateVariable}_id` = `{$this->getTable()->name}`.`id`";
EOF;
        }
      }
    }

    $tables   = $this->getTables();
    foreach ($this->getTable()->getColumns() as $column) {
      $tableName = $this->getFormatter($column->name)->strip(array("_id"))->prepend("tbl_p_")->toString();
      if (array_key_exists($tableName, $tables)) {
        $aOutput[] = <<<EOF
    \$aSql[] = "LEFT JOIN `{$tableName}` ON `{$tableName}`.`id` = `{$this->getTable()->name}`.`{$column->name}`";
EOF;
      }
    }

    $aOutput[] = <<<EOF

    \$aSql[] = \$sSql;

    \$statement = \$this->getDbManager()->prepare(implode(" ",\$aSql));
    \$statement->execute();
    return \$statement->fetchColumn();    
  }

  /**
   * searchSpecial
   */
  static function searchSpecial(\$sSql,
              \$bUseSlave=false) {

    \$aSql = array();
    \$aSql[] = "SELECT";

    // add fields from this table
EOF;
    foreach ($this->getTable()->getColumns() as $column) {
      $aOutput[] = <<<EOF
    \$aFields[] = "`{$this->getTable()->name}`.`{$column->name}` AS `{$templateClassLower}__{$column->name}`";
EOF;
    }
    $tables   = $this->getTables();
    if (array_key_exists($typeTable, $tables)) {
      foreach ($this->getTables() as $table) {
        if (false !== strpos($table->name, $templateVariable) && false !== strpos($table->name, "tbl_c_")) {
          foreach ($table->getColumns() as $column) {
            $type = $this->getFormatter($table->name)->strip(array("tbl_c_",$templateVariable."_"))->toString();
            $aOutput[] = <<<EOF
    \$aFields[] = "`{$table->name}`.`{$column->name}` AS `{$type}__{$column->name}`";
EOF;
          }
        }
      }
    }

    $aOutput[] = <<<EOF
    if (\$bBulkLoad) {
EOF;
    $tables   = $this->getTables();
    foreach ($this->getTable()->getColumns() as $column) {
      $tableName = $this->getFormatter($column->name)->strip(array("_id"))->prepend("tbl_p_")->toString();
      if (array_key_exists($tableName, $tables)) {
        $table = $tables[$tableName];
        foreach ($table->getColumns() as $column) {
          $tableAbbreviation = $this->getFormatter($table->name)->strip(array("tbl_p_","_"))->toString();
          $aOutput[] = <<<EOF
    \t\$aFields[] = "`{$table->name}`.`{$column->name}` AS `{$tableAbbreviation}__{$column->name}`";
EOF;
        }
      }
    }

    $aOutput[] = <<<EOF
    }
EOF;

    $aOutput[] = <<<EOF
    \$aSql[] = implode(", ",\$aFields);
    \$aSql[] = "FROM `{$this->getTable()->name}` ";
EOF;

    // if this table has a type table, we need to join child tables
    $tables   = $this->getTables();
    if (array_key_exists($typeTable, $tables)) {
      foreach ($this->getTables() as $table) {
        if (false !== strpos($table->name, $templateVariable) && false !== strpos($table->name, "tbl_c_")) {
          $aOutput[] = <<<EOF
    \$aSql[] = "LEFT JOIN `{$table->name}` ON `{$table->name}`.`{$templateVariable}_id` = `{$this->getTable()->name}`.`id`";
EOF;
        }
      }
    }

    // also join any tables which contain 
    $tables   = $this->getTables();
    foreach ($this->getTable()->getColumns() as $column) {
      $tableName = $this->getFormatter($column->name)->strip(array("_id"))->prepend("tbl_p_")->toString();
      if (array_key_exists($tableName, $tables)) {
        $aOutput[] = <<<EOF
    \$aSql[] = "LEFT JOIN `{$tableName}` ON `{$tableName}`.`id` = `{$this->getTable()->name}`.`{$column->name}`";
EOF;
      }
    }

    $aOutput[] = <<<EOF
    
    \$aSql[] = \$sSql;

    \$statement = \$this->getDbManager()->prepare(implode(" ",\$aSql));
    \$statement->execute();
    return \$statement->fetchAll();  
  }

  /**
   * get
   */
  static function get(\$key,
              \$bBulkLoad=false,
              \$bUseSlave=false,
              \$sAlternateTable='',
              \$sAlternateField='') {

    if (MEMCACHE_ENABLED && \$sAlternateField == "") {
      \$val = CMemcache::get("object_{$templateVariable}_".md5(\$key));
      if (\$val) return \$val;
    }


    \$aParams = (\$sAlternateField != "") ? array(array(\$sAlternateTable,\$sAlternateField,"=",\$key)) : array(array("","id","=",\$key));
    if (!\$col{$templateClassPlural} = {$this->toEngineClassName($this->getTable()->name)}::search(\$aParams, 
              null, // sort field array
              \$bBulkLoad, 
              \$bUseSlave, 
              0, // start
              1)) { // limit
      return false;
    } else {
      if (\$col{$templateClassPlural}->count() == 0) return false;

      if (MEMCACHE_ENABLED) CMemcache::set("object_{$templateVariable}_".md5(\$col{$templateClassPlural}->current()->getId()), \$col{$templateClassPlural}->current());

      return \$col{$templateClassPlural}->current();
    }
  }

  /**
   * save()
   */
  static function save({$templateClass}_Base &\$o{$templateClass}) {

      if (\$o{$templateClass}->getIsNew()) {
        return \$o{$templateClass}->add();
        \$o{$templateClass}->setIsNew(false);
      } elseif (\$o{$templateClass}->getIsDirty()) {
        return \$o{$templateClass}->update();
      } else {
        return true;
      }
  }

  /**
   * delete()
   */
  static function delete({$templateClass}_Base \$o{$templateClass}) {

      if (!\$o{$templateClass}->getIsNew()) {
        return \$o{$templateClass}->delete();
      } else {
        return true;
      }
  }

  /**
   * deleteWhere()
   */
  static function deleteWhere(\$aParams) {

      /**
       * grab all of the objects matching the criteria
       */
      \$col{$templateClassPlural}ToDelete = {$this->toEngineClassName($this->getTable()->name)}::search(\$aParams,null,true);

      /**
       * loop through each item in the collection and delete it
       */
      foreach(\$col{$templateClassPlural}ToDelete as \$o{$templateClass}) {
        {$this->toEngineClassName($this->getTable()->name)}::delete(\$o{$templateClass});
      }

      /**
       * return
       */
      return true;
  }

  /**
   * loadCollection
   */
  static function loadCollection(\$oRecords,\$bBulkLoad) {

      \$col{$templateClassPlural} = new CCollection();
      while (\$oRecord = mysql_fetch_array(\$oRecords)) {

        switch (\$oRecord['{$templateClassLower}__{$templateVariable}_type_id']) {          
EOF;
        $tables   = $this->getTables();
        if (array_key_exists($typeTable, $tables)) {
          $table = $tables[$typeTable];
          foreach ($table->getRows() as $row) {
            $type = $this->toProperName($row["type"]);
            $aOutput[] = <<<EOF
          case {$row["id"]}:
            \$o{$templateClass} = {$this->toEngineClassName($this->getTable()->name)}::new{$templateClass}_{$type}();
            break;
EOF;
          }
        }
          $aOutput[] = <<<EOF
          default:
            \$o{$templateClass} = {$this->toEngineClassName($this->getTable()->name)}::new{$templateClass}();
            break;
        }
EOF;

        foreach ($this->getTable()->columns as $column) {
          switch ($column->type) {
            case "varchar":
          $aOutput[] = <<<EOF
        \$o{$templateClass}->set{$this->toProperName($column->name)}(CDBManager::DBValue(substr(\$oRecord['{$templateClassLower}__{$column->name}'],0,$column->length),"{$column->type}"));
EOF;
              break;
            default:
          $aOutput[] = <<<EOF
        \$o{$templateClass}->set{$this->toProperName($column->name)}(CDBManager::DBValue(\$oRecord['{$templateClassLower}__{$column->name}'],"{$column->type}"));
EOF;
              break;
          }
        }

        $aOutput[] = <<<EOF
        \$o{$templateClass}->setIsDirty(false);
        \$o{$templateClass}->setIsNew(false);

EOF;

        $tables   = $this->getTables();
        if (array_key_exists($typeTable, $tables)) {
          $table = $tables[$typeTable];
          foreach ($table->getRows() as $row) {
            
            $type       = $this->toProperName($row["type"]);
            $typeLower  = $this->getFormatter($type)->toLower()->toString();
            $childTable = "tbl_c_".$templateVariable."_".$typeLower;

            if (array_key_exists($childTable, $tables)) {
              $table = $tables[$childTable];
              $aOutput[] = <<<EOF
        if (\$oRecord['{$templateClassLower}__{$templateVariable}_type_id'] == "{$row["id"]}") {
          if (\$oRecord['{$typeLower}__id'] != null) {

            \$oTmp = c{$templateClass}{$type}_Eng::newc{$templateClass}{$type}();
EOF;
            foreach ($table->getColumns() as $column) {
              switch ($column->type) {
                case "varchar":
                  $aOutput[] = <<<EOF
            \$oTmp->set{$this->toProperName($column->name)}(CDBManager::DBValue(substr(\$oRecord['{$typeLower}__{$column->name}'],0,$column->length),"{$column->type}"));
EOF;
                  break;
                default:
                  $aOutput[] = <<<EOF
            \$oTmp->set{$this->toProperName($column->name)}(CDBManager::DBValue(\$oRecord['{$typeLower}__{$column->name}'],"{$column->type}"));
EOF;
                  break;
              }
            }

            $aOutput[] = <<<EOF
            \$oTmp->setIsDirty(0);
            \$oTmp->setIsNew((\$oRecord['{\$typeLower}__{\$templateVariable}_id'] == null) ? true : false);
            \$o{$templateClass}->_oc{$templateClass}{$type} = \$oTmp;
          }
        }
EOF;
            }
          }
        }

        $aOutput[] = <<<EOF

        if (\$bBulkLoad) {
EOF;
        $tables   = $this->getTables();
        foreach ($this->getTable()->getColumns() as $column) {
          $tableName = $this->getFormatter($column->name)->strip(array("_id"))->prepend("tbl_p_")->toString();
          if (array_key_exists($tableName, $tables)) {
            $table              = $tables[$tableName];
            $tableVariable      = $this->getFormatter($table->name)->strip(array("tbl_p_"))->toString();
            $tableAbbreviation  = $this->getFormatter($table->name)->strip(array("tbl_p_","_"))->toString();
            $aOutput[] = <<<EOF

          if (\$oRecord['{$tableAbbreviation}__id'] != null) {

            switch (\$oRecord['{$tableAbbreviation}__{$tableAbbreviation}_type_id']) {
EOF;
            $typeTableName = "tbl_t_".$tableVariable;
            if (array_key_exists($typeTableName,$tables)) {
              $typeTable = $tables[$typeTableName];
              foreach ($typeTable->getRows() as $row) {
                $type = $this->toProperName($row["type"]);
                $aOutput[] = <<<EOF
              case {$row["id"]}:
                \$oTmp = {$this->toEngineClassName($table->name)}::new{$this->toProperName($table->name)}_{$type}();
                break;
EOF;
              }          
            }
            
            $aOutput[] = <<<EOF
              default:
                throw new exception("Invalid type specified");
            }

            \$oTmp->setIsDirty(0);
            \$oTmp->setIsNew((\$oRecord['methodofcontact__{$tableAbbreviation}_id'] == null) ? true : false);            
EOF;
            $table = $tables[$tableName];
            foreach ($table->getColumns() as $column) {
              $tableAbbreviation = $this->getFormatter($table->name)->strip(array("tbl_p_","_"))->toString();
              switch ($column->type) {
                case "varchar":
                  $aOutput[] = <<<EOF
            \$oTmp->set{$this->toProperName($column->name)}(CDBManager::DBValue(substr(\$oRecord['{$tableAbbreviation}__{$column->name}'],0,$column->length),"{$column->type}"));
EOF;
                  break;
                default:
                  $aOutput[] = <<<EOF
            \$oTmp->set{$this->toProperName($column->name)}(CDBManager::DBValue(\$oRecord['{$tableAbbreviation}__{$column->name}'],"{$column->type}"));
EOF;
                  break;
              }
            }
            $aOutput[] = <<<EOF

            \$o{$templateClass}->_oEntity = \$oTmp;
          }
EOF;
          }
        }

        $aOutput[] = <<<EOF
        }
        \$col{$templateClassPlural}->add(\$o{$templateClass});
      }
      return \$col{$templateClassPlural};
  }

EOF;
    $aOutput[] = <<<EOF
}
?>
EOF;

    return implode("\n",$aOutput);
  }

  function p($value)
  {
    echo "<pre>";
    die(print_r($value, true));
  }

  public function formatFilename() 
  {
    return $this->getFormatter($this->getTable()->getName())  // tbl_p_user_table-product
            ->toTitle()                 // Tbl_P_User_Table-Product
            ->replace("Tbl_P_","doP")           // boPUser_Table-Product
            ->replace("Tbl_C_","doC")         // (apply to child tables as well)
            ->strip("_")                // doPUserTable-Product
            ->replace("-","_")              // doPUserTable_Product
            ->toString();               // return string
  }

  private function toProperName($base) 
  {
    return $this->getFormatter($base)             // tbl_p_user_table-product
            ->toTitle()                 // Tbl_P_User_Table-Product
            ->strip("_Id")                // (We don't need ID)
            ->strip("Tbl_P_")               // User_Table-Product
            ->strip("Tbl_C_")             // (apply to child tables as well)
            ->strip("_")                // UserTable-Product
            ->replace("-","_")              // UserTable_Product
            ->toString();       
  }

  private function toPluralProperName($base) 
  {
    return $this->getFormatter($this->toProperName($base))->pluralize()->toString();
  }

  private function toEngineClassName($tableName) 
  {
    if (false !== strpos($tableName,"tbl_p_")) 
    {
      return $this->toProperName($tableName)."_Eng";
    } 
    elseif (false !== strpos($tableName,"tbl_c_")) 
    {
      return "c".$this->toProperName($tableName)."_Eng";
    }
    else
    {
      throw new \exception("Invalid table name: ".$tableName);
    }
  }

  /**
   * @param $column dclaysmith\Generator\Database\Column
   * @return string
   */
  private function generateParentGettersSetters(Column $column)
  {
    $columnNameProper = $this->getFormatter($column->name)
                  ->toTitle()
                  ->strip("_")
                  ->replace("-","_")
                  ->toString();

    $aOutput = array();
    $aOutput[] = <<<EOF
  public function get{$columnNameProper}() {
EOF;
          if ($column->type == "tinyint") {
    $aOutput[] = <<<EOF
    return (\$this->_{$columnNameProper}) ? 1 : 0;
EOF;
          } else {
    $aOutput[] = <<<EOF
    return \$this->_{$columnNameProper};
EOF;
          }
    $aOutput[] = <<<EOF
  }
  public function set{$columnNameProper}(\$value) {
EOF;
    switch ($column->type) {
      case "double":
        $aOutput[] = <<<EOF
    if (!is_numeric(\$value)) {
      throw new exception('Non-numeric value provided for set{$columnNameProper}.');  
    }         
EOF;
        break;
      case "int":
      case "bigint":
        $aOutput[] = <<<EOF
    if (!is_int(\$value)) {
      throw new exception('Non-integer value provided for set{$columnNameProper}.');  
    } 
EOF;
        break;
      case "tinyint":
        $aOutput[] = <<<EOF
    if (!(\$value === true || \$value === false)) {
      throw new exception('Non-boolean value provided for set{$columnNameProper}.');  
    }   
EOF;
        break;
      case "datetime":
        $aOutput[] = <<<EOF
    if (!CValidation::isValidDatetime(\$value)) {
      throw new exception('Non-date value provided for set{$columnNameProper}.'); 
    }   
EOF;
        break;
      case "varchar": 
        $aOutput[] = <<<EOF
    if (strlen(stripslashes(\$value)) > {$column->length}) {
      throw new exception('The value provided for set{$columnNameProper} exceeds the allowed length of {$column->length}.');        
    }       
EOF;
        break;
    }
    
    $aOutput[] = <<<EOF

    if (\$this->_{$columnNameProper} != \$value) {
      if (!\$this->getIsNew()) \$this->_aChanged[] = "{$columnNameProper}";
      \$this->_isDirty = true;
    }
    \$this->_{$columnNameProper} = \$value;
    return true;
  }

EOF;
    return implode("\n",$aOutput);
  }


}
?>